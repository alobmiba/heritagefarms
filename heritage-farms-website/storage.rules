rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.admin == true;
    }
    
    // Helper function to validate image uploads
    function isValidImage() {
      return request.resource != null &&
             request.resource.size < 5 * 1024 * 1024 && // Max 5MB
             request.resource.contentType.matches('image/(png|jpeg|jpg|gif|webp)');
    }
    
    // Helper function to validate document uploads
    function isValidDocument() {
      return request.resource != null &&
             request.resource.size < 10 * 1024 * 1024 && // Max 10MB
             request.resource.contentType.matches('application/(pdf|msword|vnd.openxmlformats-officedocument.wordprocessingml.document)');
    }
    
    // Public product images - anyone can read
    match /products/{productId}/{allPaths=**} {
      allow read;
      allow write: if isAdmin() && isValidImage();
    }
    
    // User uploads - users can upload their own files with restrictions
    match /users/{userId}/{allPaths=**} {
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       (isValidImage() || isValidDocument());
      allow update: if false; // Prevent file updates
      allow delete: if request.auth != null && 
                       (request.auth.uid == userId || isAdmin());
    }
    
    // Order attachments - restricted access
    match /orders/{orderId}/{allPaths=**} {
      allow read: if request.auth != null && isAdmin();
      allow write: if request.auth != null && isAdmin() && isValidDocument();
    }
    
    // Deny all other paths by default
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}
