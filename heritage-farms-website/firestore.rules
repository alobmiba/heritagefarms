rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to validate order data
    function isValidOrder() {
      let order = request.resource.data;
      return request.auth != null &&
             order.keys().hasAll(['name', 'email', 'phone', 'items', 'total']) &&
             order.name is string && order.name.size() > 1 && order.name.size() < 100 &&
             order.email is string && order.email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') &&
             order.phone is string && order.phone.size() > 5 && order.phone.size() < 20 &&
             order.items is list && order.items.size() > 0 && order.items.size() < 50 &&
             order.total is number && order.total > 0 && order.total < 100000 &&
             order.createdAt == request.time;
    }
    
    // Rate limiting: Prevent users from creating too many orders
    function orderRateLimit() {
      return request.auth != null &&
             !exists(/databases/$(database)/documents/rate_limits/orders_$(request.auth.uid)) ||
             get(/databases/$(database)/documents/rate_limits/orders_$(request.auth.uid)).data.lastOrder < request.time - duration.value(1, 'm');
    }
    
    // Deny all reads and writes by default
    match /{document=**} {
      allow read, write: if false;
    }

    // Orders collection: Users can create with validation, admins can read/update
    match /orders/{orderId} {
      allow create: if isValidOrder() && orderRateLimit();
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
      allow update: if isAdmin() && 
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasOnly(['status', 'updatedAt', 'notes']);
      allow delete: if false; // Never allow deletion of orders
    }
    
    // Inventory collection: Read-only for authenticated users, write for admins
    match /inventory/{itemId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Users collection: Users can read/write their own data with restrictions
    match /users/{userId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       request.resource.data.keys().hasOnly(['email', 'name', 'createdAt']) &&
                       request.resource.data.createdAt == request.time;
      allow update: if request.auth != null && 
                       request.auth.uid == userId &&
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'createdAt']);
      allow delete: if false;
    }
    
    // Rate limiting collection (managed by Cloud Functions)
    match /rate_limits/{document} {
      allow read: if false;
      allow write: if false; // Only Cloud Functions should write here
    }
  }
}
